// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/NpoolPlatform/sphinx-coininfo/pkg/db/ent/migrate"
	"github.com/google/uuid"

	"github.com/NpoolPlatform/sphinx-coininfo/pkg/db/ent/coininfo"
	"github.com/NpoolPlatform/sphinx-coininfo/pkg/db/ent/description"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// CoinInfo is the client for interacting with the CoinInfo builders.
	CoinInfo *CoinInfoClient
	// Description is the client for interacting with the Description builders.
	Description *DescriptionClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.CoinInfo = NewCoinInfoClient(c.config)
	c.Description = NewDescriptionClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		CoinInfo:    NewCoinInfoClient(cfg),
		Description: NewDescriptionClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		CoinInfo:    NewCoinInfoClient(cfg),
		Description: NewDescriptionClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		CoinInfo.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.CoinInfo.Use(hooks...)
	c.Description.Use(hooks...)
}

// CoinInfoClient is a client for the CoinInfo schema.
type CoinInfoClient struct {
	config
}

// NewCoinInfoClient returns a client for the CoinInfo from the given config.
func NewCoinInfoClient(c config) *CoinInfoClient {
	return &CoinInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coininfo.Hooks(f(g(h())))`.
func (c *CoinInfoClient) Use(hooks ...Hook) {
	c.hooks.CoinInfo = append(c.hooks.CoinInfo, hooks...)
}

// Create returns a create builder for CoinInfo.
func (c *CoinInfoClient) Create() *CoinInfoCreate {
	mutation := newCoinInfoMutation(c.config, OpCreate)
	return &CoinInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CoinInfo entities.
func (c *CoinInfoClient) CreateBulk(builders ...*CoinInfoCreate) *CoinInfoCreateBulk {
	return &CoinInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CoinInfo.
func (c *CoinInfoClient) Update() *CoinInfoUpdate {
	mutation := newCoinInfoMutation(c.config, OpUpdate)
	return &CoinInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CoinInfoClient) UpdateOne(ci *CoinInfo) *CoinInfoUpdateOne {
	mutation := newCoinInfoMutation(c.config, OpUpdateOne, withCoinInfo(ci))
	return &CoinInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CoinInfoClient) UpdateOneID(id uuid.UUID) *CoinInfoUpdateOne {
	mutation := newCoinInfoMutation(c.config, OpUpdateOne, withCoinInfoID(id))
	return &CoinInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CoinInfo.
func (c *CoinInfoClient) Delete() *CoinInfoDelete {
	mutation := newCoinInfoMutation(c.config, OpDelete)
	return &CoinInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CoinInfoClient) DeleteOne(ci *CoinInfo) *CoinInfoDeleteOne {
	return c.DeleteOneID(ci.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CoinInfoClient) DeleteOneID(id uuid.UUID) *CoinInfoDeleteOne {
	builder := c.Delete().Where(coininfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CoinInfoDeleteOne{builder}
}

// Query returns a query builder for CoinInfo.
func (c *CoinInfoClient) Query() *CoinInfoQuery {
	return &CoinInfoQuery{
		config: c.config,
	}
}

// Get returns a CoinInfo entity by its id.
func (c *CoinInfoClient) Get(ctx context.Context, id uuid.UUID) (*CoinInfo, error) {
	return c.Query().Where(coininfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CoinInfoClient) GetX(ctx context.Context, id uuid.UUID) *CoinInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CoinInfoClient) Hooks() []Hook {
	return c.hooks.CoinInfo
}

// DescriptionClient is a client for the Description schema.
type DescriptionClient struct {
	config
}

// NewDescriptionClient returns a client for the Description from the given config.
func NewDescriptionClient(c config) *DescriptionClient {
	return &DescriptionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `description.Hooks(f(g(h())))`.
func (c *DescriptionClient) Use(hooks ...Hook) {
	c.hooks.Description = append(c.hooks.Description, hooks...)
}

// Create returns a create builder for Description.
func (c *DescriptionClient) Create() *DescriptionCreate {
	mutation := newDescriptionMutation(c.config, OpCreate)
	return &DescriptionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Description entities.
func (c *DescriptionClient) CreateBulk(builders ...*DescriptionCreate) *DescriptionCreateBulk {
	return &DescriptionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Description.
func (c *DescriptionClient) Update() *DescriptionUpdate {
	mutation := newDescriptionMutation(c.config, OpUpdate)
	return &DescriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DescriptionClient) UpdateOne(d *Description) *DescriptionUpdateOne {
	mutation := newDescriptionMutation(c.config, OpUpdateOne, withDescription(d))
	return &DescriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DescriptionClient) UpdateOneID(id uuid.UUID) *DescriptionUpdateOne {
	mutation := newDescriptionMutation(c.config, OpUpdateOne, withDescriptionID(id))
	return &DescriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Description.
func (c *DescriptionClient) Delete() *DescriptionDelete {
	mutation := newDescriptionMutation(c.config, OpDelete)
	return &DescriptionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DescriptionClient) DeleteOne(d *Description) *DescriptionDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DescriptionClient) DeleteOneID(id uuid.UUID) *DescriptionDeleteOne {
	builder := c.Delete().Where(description.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DescriptionDeleteOne{builder}
}

// Query returns a query builder for Description.
func (c *DescriptionClient) Query() *DescriptionQuery {
	return &DescriptionQuery{
		config: c.config,
	}
}

// Get returns a Description entity by its id.
func (c *DescriptionClient) Get(ctx context.Context, id uuid.UUID) (*Description, error) {
	return c.Query().Where(description.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DescriptionClient) GetX(ctx context.Context, id uuid.UUID) *Description {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DescriptionClient) Hooks() []Hook {
	return c.hooks.Description
}

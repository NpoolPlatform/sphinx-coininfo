// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/sphinx-coininfo/pkg/db/ent/coininfo"
	"github.com/google/uuid"
)

// CoinInfoCreate is the builder for creating a CoinInfo entity.
type CoinInfoCreate struct {
	config
	mutation *CoinInfoMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (cic *CoinInfoCreate) SetName(s string) *CoinInfoCreate {
	cic.mutation.SetName(s)
	return cic
}

// SetUnit sets the "unit" field.
func (cic *CoinInfoCreate) SetUnit(s string) *CoinInfoCreate {
	cic.mutation.SetUnit(s)
	return cic
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (cic *CoinInfoCreate) SetNillableUnit(s *string) *CoinInfoCreate {
	if s != nil {
		cic.SetUnit(*s)
	}
	return cic
}

// SetPreSale sets the "pre_sale" field.
func (cic *CoinInfoCreate) SetPreSale(b bool) *CoinInfoCreate {
	cic.mutation.SetPreSale(b)
	return cic
}

// SetNillablePreSale sets the "pre_sale" field if the given value is not nil.
func (cic *CoinInfoCreate) SetNillablePreSale(b *bool) *CoinInfoCreate {
	if b != nil {
		cic.SetPreSale(*b)
	}
	return cic
}

// SetLogo sets the "logo" field.
func (cic *CoinInfoCreate) SetLogo(s string) *CoinInfoCreate {
	cic.mutation.SetLogo(s)
	return cic
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (cic *CoinInfoCreate) SetNillableLogo(s *string) *CoinInfoCreate {
	if s != nil {
		cic.SetLogo(*s)
	}
	return cic
}

// SetID sets the "id" field.
func (cic *CoinInfoCreate) SetID(u uuid.UUID) *CoinInfoCreate {
	cic.mutation.SetID(u)
	return cic
}

// Mutation returns the CoinInfoMutation object of the builder.
func (cic *CoinInfoCreate) Mutation() *CoinInfoMutation {
	return cic.mutation
}

// Save creates the CoinInfo in the database.
func (cic *CoinInfoCreate) Save(ctx context.Context) (*CoinInfo, error) {
	var (
		err  error
		node *CoinInfo
	)
	cic.defaults()
	if len(cic.hooks) == 0 {
		if err = cic.check(); err != nil {
			return nil, err
		}
		node, err = cic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CoinInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cic.check(); err != nil {
				return nil, err
			}
			cic.mutation = mutation
			if node, err = cic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cic.hooks) - 1; i >= 0; i-- {
			if cic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cic *CoinInfoCreate) SaveX(ctx context.Context) *CoinInfo {
	v, err := cic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cic *CoinInfoCreate) Exec(ctx context.Context) error {
	_, err := cic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cic *CoinInfoCreate) ExecX(ctx context.Context) {
	if err := cic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cic *CoinInfoCreate) defaults() {
	if _, ok := cic.mutation.Unit(); !ok {
		v := coininfo.DefaultUnit
		cic.mutation.SetUnit(v)
	}
	if _, ok := cic.mutation.PreSale(); !ok {
		v := coininfo.DefaultPreSale
		cic.mutation.SetPreSale(v)
	}
	if _, ok := cic.mutation.Logo(); !ok {
		v := coininfo.DefaultLogo
		cic.mutation.SetLogo(v)
	}
	if _, ok := cic.mutation.ID(); !ok {
		v := coininfo.DefaultID()
		cic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cic *CoinInfoCreate) check() error {
	if _, ok := cic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if v, ok := cic.mutation.Name(); ok {
		if err := coininfo.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "name": %w`, err)}
		}
	}
	if _, ok := cic.mutation.Unit(); !ok {
		return &ValidationError{Name: "unit", err: errors.New(`ent: missing required field "unit"`)}
	}
	if v, ok := cic.mutation.Unit(); ok {
		if err := coininfo.UnitValidator(v); err != nil {
			return &ValidationError{Name: "unit", err: fmt.Errorf(`ent: validator failed for field "unit": %w`, err)}
		}
	}
	if _, ok := cic.mutation.PreSale(); !ok {
		return &ValidationError{Name: "pre_sale", err: errors.New(`ent: missing required field "pre_sale"`)}
	}
	if _, ok := cic.mutation.Logo(); !ok {
		return &ValidationError{Name: "logo", err: errors.New(`ent: missing required field "logo"`)}
	}
	return nil
}

func (cic *CoinInfoCreate) sqlSave(ctx context.Context) (*CoinInfo, error) {
	_node, _spec := cic.createSpec()
	if err := sqlgraph.CreateNode(ctx, cic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (cic *CoinInfoCreate) createSpec() (*CoinInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &CoinInfo{config: cic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: coininfo.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: coininfo.FieldID,
			},
		}
	)
	_spec.OnConflict = cic.conflict
	if id, ok := cic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cic.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coininfo.FieldName,
		})
		_node.Name = value
	}
	if value, ok := cic.mutation.Unit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coininfo.FieldUnit,
		})
		_node.Unit = value
	}
	if value, ok := cic.mutation.PreSale(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: coininfo.FieldPreSale,
		})
		_node.PreSale = value
	}
	if value, ok := cic.mutation.Logo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coininfo.FieldLogo,
		})
		_node.Logo = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CoinInfo.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CoinInfoUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
//
func (cic *CoinInfoCreate) OnConflict(opts ...sql.ConflictOption) *CoinInfoUpsertOne {
	cic.conflict = opts
	return &CoinInfoUpsertOne{
		create: cic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CoinInfo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cic *CoinInfoCreate) OnConflictColumns(columns ...string) *CoinInfoUpsertOne {
	cic.conflict = append(cic.conflict, sql.ConflictColumns(columns...))
	return &CoinInfoUpsertOne{
		create: cic,
	}
}

type (
	// CoinInfoUpsertOne is the builder for "upsert"-ing
	//  one CoinInfo node.
	CoinInfoUpsertOne struct {
		create *CoinInfoCreate
	}

	// CoinInfoUpsert is the "OnConflict" setter.
	CoinInfoUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *CoinInfoUpsert) SetName(v string) *CoinInfoUpsert {
	u.Set(coininfo.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CoinInfoUpsert) UpdateName() *CoinInfoUpsert {
	u.SetExcluded(coininfo.FieldName)
	return u
}

// SetUnit sets the "unit" field.
func (u *CoinInfoUpsert) SetUnit(v string) *CoinInfoUpsert {
	u.Set(coininfo.FieldUnit, v)
	return u
}

// UpdateUnit sets the "unit" field to the value that was provided on create.
func (u *CoinInfoUpsert) UpdateUnit() *CoinInfoUpsert {
	u.SetExcluded(coininfo.FieldUnit)
	return u
}

// SetPreSale sets the "pre_sale" field.
func (u *CoinInfoUpsert) SetPreSale(v bool) *CoinInfoUpsert {
	u.Set(coininfo.FieldPreSale, v)
	return u
}

// UpdatePreSale sets the "pre_sale" field to the value that was provided on create.
func (u *CoinInfoUpsert) UpdatePreSale() *CoinInfoUpsert {
	u.SetExcluded(coininfo.FieldPreSale)
	return u
}

// SetLogo sets the "logo" field.
func (u *CoinInfoUpsert) SetLogo(v string) *CoinInfoUpsert {
	u.Set(coininfo.FieldLogo, v)
	return u
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *CoinInfoUpsert) UpdateLogo() *CoinInfoUpsert {
	u.SetExcluded(coininfo.FieldLogo)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CoinInfo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(coininfo.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CoinInfoUpsertOne) UpdateNewValues() *CoinInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(coininfo.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.CoinInfo.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *CoinInfoUpsertOne) Ignore() *CoinInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CoinInfoUpsertOne) DoNothing() *CoinInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CoinInfoCreate.OnConflict
// documentation for more info.
func (u *CoinInfoUpsertOne) Update(set func(*CoinInfoUpsert)) *CoinInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CoinInfoUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *CoinInfoUpsertOne) SetName(v string) *CoinInfoUpsertOne {
	return u.Update(func(s *CoinInfoUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CoinInfoUpsertOne) UpdateName() *CoinInfoUpsertOne {
	return u.Update(func(s *CoinInfoUpsert) {
		s.UpdateName()
	})
}

// SetUnit sets the "unit" field.
func (u *CoinInfoUpsertOne) SetUnit(v string) *CoinInfoUpsertOne {
	return u.Update(func(s *CoinInfoUpsert) {
		s.SetUnit(v)
	})
}

// UpdateUnit sets the "unit" field to the value that was provided on create.
func (u *CoinInfoUpsertOne) UpdateUnit() *CoinInfoUpsertOne {
	return u.Update(func(s *CoinInfoUpsert) {
		s.UpdateUnit()
	})
}

// SetPreSale sets the "pre_sale" field.
func (u *CoinInfoUpsertOne) SetPreSale(v bool) *CoinInfoUpsertOne {
	return u.Update(func(s *CoinInfoUpsert) {
		s.SetPreSale(v)
	})
}

// UpdatePreSale sets the "pre_sale" field to the value that was provided on create.
func (u *CoinInfoUpsertOne) UpdatePreSale() *CoinInfoUpsertOne {
	return u.Update(func(s *CoinInfoUpsert) {
		s.UpdatePreSale()
	})
}

// SetLogo sets the "logo" field.
func (u *CoinInfoUpsertOne) SetLogo(v string) *CoinInfoUpsertOne {
	return u.Update(func(s *CoinInfoUpsert) {
		s.SetLogo(v)
	})
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *CoinInfoUpsertOne) UpdateLogo() *CoinInfoUpsertOne {
	return u.Update(func(s *CoinInfoUpsert) {
		s.UpdateLogo()
	})
}

// Exec executes the query.
func (u *CoinInfoUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CoinInfoCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CoinInfoUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CoinInfoUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CoinInfoUpsertOne.ID is not supported by MySQL driver. Use CoinInfoUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CoinInfoUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CoinInfoCreateBulk is the builder for creating many CoinInfo entities in bulk.
type CoinInfoCreateBulk struct {
	config
	builders []*CoinInfoCreate
	conflict []sql.ConflictOption
}

// Save creates the CoinInfo entities in the database.
func (cicb *CoinInfoCreateBulk) Save(ctx context.Context) ([]*CoinInfo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cicb.builders))
	nodes := make([]*CoinInfo, len(cicb.builders))
	mutators := make([]Mutator, len(cicb.builders))
	for i := range cicb.builders {
		func(i int, root context.Context) {
			builder := cicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CoinInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cicb *CoinInfoCreateBulk) SaveX(ctx context.Context) []*CoinInfo {
	v, err := cicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cicb *CoinInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := cicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cicb *CoinInfoCreateBulk) ExecX(ctx context.Context) {
	if err := cicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CoinInfo.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CoinInfoUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
//
func (cicb *CoinInfoCreateBulk) OnConflict(opts ...sql.ConflictOption) *CoinInfoUpsertBulk {
	cicb.conflict = opts
	return &CoinInfoUpsertBulk{
		create: cicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CoinInfo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cicb *CoinInfoCreateBulk) OnConflictColumns(columns ...string) *CoinInfoUpsertBulk {
	cicb.conflict = append(cicb.conflict, sql.ConflictColumns(columns...))
	return &CoinInfoUpsertBulk{
		create: cicb,
	}
}

// CoinInfoUpsertBulk is the builder for "upsert"-ing
// a bulk of CoinInfo nodes.
type CoinInfoUpsertBulk struct {
	create *CoinInfoCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CoinInfo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(coininfo.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CoinInfoUpsertBulk) UpdateNewValues() *CoinInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(coininfo.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CoinInfo.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *CoinInfoUpsertBulk) Ignore() *CoinInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CoinInfoUpsertBulk) DoNothing() *CoinInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CoinInfoCreateBulk.OnConflict
// documentation for more info.
func (u *CoinInfoUpsertBulk) Update(set func(*CoinInfoUpsert)) *CoinInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CoinInfoUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *CoinInfoUpsertBulk) SetName(v string) *CoinInfoUpsertBulk {
	return u.Update(func(s *CoinInfoUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CoinInfoUpsertBulk) UpdateName() *CoinInfoUpsertBulk {
	return u.Update(func(s *CoinInfoUpsert) {
		s.UpdateName()
	})
}

// SetUnit sets the "unit" field.
func (u *CoinInfoUpsertBulk) SetUnit(v string) *CoinInfoUpsertBulk {
	return u.Update(func(s *CoinInfoUpsert) {
		s.SetUnit(v)
	})
}

// UpdateUnit sets the "unit" field to the value that was provided on create.
func (u *CoinInfoUpsertBulk) UpdateUnit() *CoinInfoUpsertBulk {
	return u.Update(func(s *CoinInfoUpsert) {
		s.UpdateUnit()
	})
}

// SetPreSale sets the "pre_sale" field.
func (u *CoinInfoUpsertBulk) SetPreSale(v bool) *CoinInfoUpsertBulk {
	return u.Update(func(s *CoinInfoUpsert) {
		s.SetPreSale(v)
	})
}

// UpdatePreSale sets the "pre_sale" field to the value that was provided on create.
func (u *CoinInfoUpsertBulk) UpdatePreSale() *CoinInfoUpsertBulk {
	return u.Update(func(s *CoinInfoUpsert) {
		s.UpdatePreSale()
	})
}

// SetLogo sets the "logo" field.
func (u *CoinInfoUpsertBulk) SetLogo(v string) *CoinInfoUpsertBulk {
	return u.Update(func(s *CoinInfoUpsert) {
		s.SetLogo(v)
	})
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *CoinInfoUpsertBulk) UpdateLogo() *CoinInfoUpsertBulk {
	return u.Update(func(s *CoinInfoUpsert) {
		s.UpdateLogo()
	})
}

// Exec executes the query.
func (u *CoinInfoUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CoinInfoCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CoinInfoCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CoinInfoUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

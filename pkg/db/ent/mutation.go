// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/NpoolPlatform/sphinx-coininfo/pkg/db/ent/coininfo"
	"github.com/NpoolPlatform/sphinx-coininfo/pkg/db/ent/predicate"
	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCoinInfo = "CoinInfo"
	TypeEmpty    = "Empty"
)

// CoinInfoMutation represents an operation that mutates the CoinInfo nodes in the graph.
type CoinInfoMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	coin_type_id    *int32
	addcoin_type_id *int32
	name            *string
	unit            *string
	is_presale      *bool
	logo_image      *string
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*CoinInfo, error)
	predicates      []predicate.CoinInfo
}

var _ ent.Mutation = (*CoinInfoMutation)(nil)

// coininfoOption allows management of the mutation configuration using functional options.
type coininfoOption func(*CoinInfoMutation)

// newCoinInfoMutation creates new mutation for the CoinInfo entity.
func newCoinInfoMutation(c config, op Op, opts ...coininfoOption) *CoinInfoMutation {
	m := &CoinInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeCoinInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCoinInfoID sets the ID field of the mutation.
func withCoinInfoID(id uuid.UUID) coininfoOption {
	return func(m *CoinInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *CoinInfo
		)
		m.oldValue = func(ctx context.Context) (*CoinInfo, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CoinInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCoinInfo sets the old CoinInfo of the mutation.
func withCoinInfo(node *CoinInfo) coininfoOption {
	return func(m *CoinInfoMutation) {
		m.oldValue = func(context.Context) (*CoinInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CoinInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CoinInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CoinInfo entities.
func (m *CoinInfoMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CoinInfoMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *CoinInfoMutation) SetCoinTypeID(i int32) {
	m.coin_type_id = &i
	m.addcoin_type_id = nil
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *CoinInfoMutation) CoinTypeID() (r int32, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the CoinInfo entity.
// If the CoinInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinInfoMutation) OldCoinTypeID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// AddCoinTypeID adds i to the "coin_type_id" field.
func (m *CoinInfoMutation) AddCoinTypeID(i int32) {
	if m.addcoin_type_id != nil {
		*m.addcoin_type_id += i
	} else {
		m.addcoin_type_id = &i
	}
}

// AddedCoinTypeID returns the value that was added to the "coin_type_id" field in this mutation.
func (m *CoinInfoMutation) AddedCoinTypeID() (r int32, exists bool) {
	v := m.addcoin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *CoinInfoMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
	m.addcoin_type_id = nil
}

// SetName sets the "name" field.
func (m *CoinInfoMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CoinInfoMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the CoinInfo entity.
// If the CoinInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinInfoMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CoinInfoMutation) ResetName() {
	m.name = nil
}

// SetUnit sets the "unit" field.
func (m *CoinInfoMutation) SetUnit(s string) {
	m.unit = &s
}

// Unit returns the value of the "unit" field in the mutation.
func (m *CoinInfoMutation) Unit() (r string, exists bool) {
	v := m.unit
	if v == nil {
		return
	}
	return *v, true
}

// OldUnit returns the old "unit" field's value of the CoinInfo entity.
// If the CoinInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinInfoMutation) OldUnit(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUnit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUnit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnit: %w", err)
	}
	return oldValue.Unit, nil
}

// ResetUnit resets all changes to the "unit" field.
func (m *CoinInfoMutation) ResetUnit() {
	m.unit = nil
}

// SetIsPresale sets the "is_presale" field.
func (m *CoinInfoMutation) SetIsPresale(b bool) {
	m.is_presale = &b
}

// IsPresale returns the value of the "is_presale" field in the mutation.
func (m *CoinInfoMutation) IsPresale() (r bool, exists bool) {
	v := m.is_presale
	if v == nil {
		return
	}
	return *v, true
}

// OldIsPresale returns the old "is_presale" field's value of the CoinInfo entity.
// If the CoinInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinInfoMutation) OldIsPresale(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsPresale is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsPresale requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsPresale: %w", err)
	}
	return oldValue.IsPresale, nil
}

// ResetIsPresale resets all changes to the "is_presale" field.
func (m *CoinInfoMutation) ResetIsPresale() {
	m.is_presale = nil
}

// SetLogoImage sets the "logo_image" field.
func (m *CoinInfoMutation) SetLogoImage(s string) {
	m.logo_image = &s
}

// LogoImage returns the value of the "logo_image" field in the mutation.
func (m *CoinInfoMutation) LogoImage() (r string, exists bool) {
	v := m.logo_image
	if v == nil {
		return
	}
	return *v, true
}

// OldLogoImage returns the old "logo_image" field's value of the CoinInfo entity.
// If the CoinInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinInfoMutation) OldLogoImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLogoImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLogoImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogoImage: %w", err)
	}
	return oldValue.LogoImage, nil
}

// ResetLogoImage resets all changes to the "logo_image" field.
func (m *CoinInfoMutation) ResetLogoImage() {
	m.logo_image = nil
}

// Where appends a list predicates to the CoinInfoMutation builder.
func (m *CoinInfoMutation) Where(ps ...predicate.CoinInfo) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CoinInfoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CoinInfo).
func (m *CoinInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CoinInfoMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.coin_type_id != nil {
		fields = append(fields, coininfo.FieldCoinTypeID)
	}
	if m.name != nil {
		fields = append(fields, coininfo.FieldName)
	}
	if m.unit != nil {
		fields = append(fields, coininfo.FieldUnit)
	}
	if m.is_presale != nil {
		fields = append(fields, coininfo.FieldIsPresale)
	}
	if m.logo_image != nil {
		fields = append(fields, coininfo.FieldLogoImage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CoinInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case coininfo.FieldCoinTypeID:
		return m.CoinTypeID()
	case coininfo.FieldName:
		return m.Name()
	case coininfo.FieldUnit:
		return m.Unit()
	case coininfo.FieldIsPresale:
		return m.IsPresale()
	case coininfo.FieldLogoImage:
		return m.LogoImage()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CoinInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case coininfo.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case coininfo.FieldName:
		return m.OldName(ctx)
	case coininfo.FieldUnit:
		return m.OldUnit(ctx)
	case coininfo.FieldIsPresale:
		return m.OldIsPresale(ctx)
	case coininfo.FieldLogoImage:
		return m.OldLogoImage(ctx)
	}
	return nil, fmt.Errorf("unknown CoinInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoinInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case coininfo.FieldCoinTypeID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case coininfo.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case coininfo.FieldUnit:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnit(v)
		return nil
	case coininfo.FieldIsPresale:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsPresale(v)
		return nil
	case coininfo.FieldLogoImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogoImage(v)
		return nil
	}
	return fmt.Errorf("unknown CoinInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CoinInfoMutation) AddedFields() []string {
	var fields []string
	if m.addcoin_type_id != nil {
		fields = append(fields, coininfo.FieldCoinTypeID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CoinInfoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case coininfo.FieldCoinTypeID:
		return m.AddedCoinTypeID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoinInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case coininfo.FieldCoinTypeID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCoinTypeID(v)
		return nil
	}
	return fmt.Errorf("unknown CoinInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CoinInfoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CoinInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CoinInfoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CoinInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CoinInfoMutation) ResetField(name string) error {
	switch name {
	case coininfo.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case coininfo.FieldName:
		m.ResetName()
		return nil
	case coininfo.FieldUnit:
		m.ResetUnit()
		return nil
	case coininfo.FieldIsPresale:
		m.ResetIsPresale()
		return nil
	case coininfo.FieldLogoImage:
		m.ResetLogoImage()
		return nil
	}
	return fmt.Errorf("unknown CoinInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CoinInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CoinInfoMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CoinInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CoinInfoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CoinInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CoinInfoMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CoinInfoMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CoinInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CoinInfoMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CoinInfo edge %s", name)
}

// EmptyMutation represents an operation that mutates the Empty nodes in the graph.
type EmptyMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Empty, error)
	predicates    []predicate.Empty
}

var _ ent.Mutation = (*EmptyMutation)(nil)

// emptyOption allows management of the mutation configuration using functional options.
type emptyOption func(*EmptyMutation)

// newEmptyMutation creates new mutation for the Empty entity.
func newEmptyMutation(c config, op Op, opts ...emptyOption) *EmptyMutation {
	m := &EmptyMutation{
		config:        c,
		op:            op,
		typ:           TypeEmpty,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmptyID sets the ID field of the mutation.
func withEmptyID(id int) emptyOption {
	return func(m *EmptyMutation) {
		var (
			err   error
			once  sync.Once
			value *Empty
		)
		m.oldValue = func(ctx context.Context) (*Empty, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Empty.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmpty sets the old Empty of the mutation.
func withEmpty(node *Empty) emptyOption {
	return func(m *EmptyMutation) {
		m.oldValue = func(context.Context) (*Empty, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmptyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmptyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EmptyMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// Where appends a list predicates to the EmptyMutation builder.
func (m *EmptyMutation) Where(ps ...predicate.Empty) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *EmptyMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Empty).
func (m *EmptyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EmptyMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EmptyMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EmptyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Empty field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmptyMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Empty field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EmptyMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EmptyMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmptyMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Empty numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EmptyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EmptyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmptyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Empty nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EmptyMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Empty field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EmptyMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EmptyMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EmptyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EmptyMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EmptyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EmptyMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EmptyMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Empty unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EmptyMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Empty edge %s", name)
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/NpoolPlatform/sphinx-coininfo/pkg/db/ent/coininfo"
	"github.com/NpoolPlatform/sphinx-coininfo/pkg/db/ent/description"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 2)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   coininfo.Table,
			Columns: coininfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: coininfo.FieldID,
			},
		},
		Type: "CoinInfo",
		Fields: map[string]*sqlgraph.FieldSpec{
			coininfo.FieldCreatedAt:      {Type: field.TypeUint32, Column: coininfo.FieldCreatedAt},
			coininfo.FieldUpdatedAt:      {Type: field.TypeUint32, Column: coininfo.FieldUpdatedAt},
			coininfo.FieldDeletedAt:      {Type: field.TypeUint32, Column: coininfo.FieldDeletedAt},
			coininfo.FieldName:           {Type: field.TypeString, Column: coininfo.FieldName},
			coininfo.FieldUnit:           {Type: field.TypeString, Column: coininfo.FieldUnit},
			coininfo.FieldReservedAmount: {Type: field.TypeUint64, Column: coininfo.FieldReservedAmount},
			coininfo.FieldPreSale:        {Type: field.TypeBool, Column: coininfo.FieldPreSale},
			coininfo.FieldLogo:           {Type: field.TypeString, Column: coininfo.FieldLogo},
			coininfo.FieldEnv:            {Type: field.TypeString, Column: coininfo.FieldEnv},
			coininfo.FieldForPay:         {Type: field.TypeBool, Column: coininfo.FieldForPay},
			coininfo.FieldHomePage:       {Type: field.TypeString, Column: coininfo.FieldHomePage},
			coininfo.FieldSpecs:          {Type: field.TypeString, Column: coininfo.FieldSpecs},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   description.Table,
			Columns: description.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: description.FieldID,
			},
		},
		Type: "Description",
		Fields: map[string]*sqlgraph.FieldSpec{
			description.FieldCreatedAt:  {Type: field.TypeUint32, Column: description.FieldCreatedAt},
			description.FieldUpdatedAt:  {Type: field.TypeUint32, Column: description.FieldUpdatedAt},
			description.FieldDeletedAt:  {Type: field.TypeUint32, Column: description.FieldDeletedAt},
			description.FieldCoinTypeID: {Type: field.TypeUUID, Column: description.FieldCoinTypeID},
			description.FieldTitle:      {Type: field.TypeString, Column: description.FieldTitle},
			description.FieldMessage:    {Type: field.TypeString, Column: description.FieldMessage},
			description.FieldUsedFor:    {Type: field.TypeString, Column: description.FieldUsedFor},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (ciq *CoinInfoQuery) addPredicate(pred func(s *sql.Selector)) {
	ciq.predicates = append(ciq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CoinInfoQuery builder.
func (ciq *CoinInfoQuery) Filter() *CoinInfoFilter {
	return &CoinInfoFilter{ciq}
}

// addPredicate implements the predicateAdder interface.
func (m *CoinInfoMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CoinInfoMutation builder.
func (m *CoinInfoMutation) Filter() *CoinInfoFilter {
	return &CoinInfoFilter{m}
}

// CoinInfoFilter provides a generic filtering capability at runtime for CoinInfoQuery.
type CoinInfoFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *CoinInfoFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *CoinInfoFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(coininfo.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *CoinInfoFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(coininfo.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *CoinInfoFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(coininfo.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *CoinInfoFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(coininfo.FieldDeletedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *CoinInfoFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(coininfo.FieldName))
}

// WhereUnit applies the entql string predicate on the unit field.
func (f *CoinInfoFilter) WhereUnit(p entql.StringP) {
	f.Where(p.Field(coininfo.FieldUnit))
}

// WhereReservedAmount applies the entql uint64 predicate on the reserved_amount field.
func (f *CoinInfoFilter) WhereReservedAmount(p entql.Uint64P) {
	f.Where(p.Field(coininfo.FieldReservedAmount))
}

// WherePreSale applies the entql bool predicate on the pre_sale field.
func (f *CoinInfoFilter) WherePreSale(p entql.BoolP) {
	f.Where(p.Field(coininfo.FieldPreSale))
}

// WhereLogo applies the entql string predicate on the logo field.
func (f *CoinInfoFilter) WhereLogo(p entql.StringP) {
	f.Where(p.Field(coininfo.FieldLogo))
}

// WhereEnv applies the entql string predicate on the env field.
func (f *CoinInfoFilter) WhereEnv(p entql.StringP) {
	f.Where(p.Field(coininfo.FieldEnv))
}

// WhereForPay applies the entql bool predicate on the for_pay field.
func (f *CoinInfoFilter) WhereForPay(p entql.BoolP) {
	f.Where(p.Field(coininfo.FieldForPay))
}

// WhereHomePage applies the entql string predicate on the home_page field.
func (f *CoinInfoFilter) WhereHomePage(p entql.StringP) {
	f.Where(p.Field(coininfo.FieldHomePage))
}

// WhereSpecs applies the entql string predicate on the specs field.
func (f *CoinInfoFilter) WhereSpecs(p entql.StringP) {
	f.Where(p.Field(coininfo.FieldSpecs))
}

// addPredicate implements the predicateAdder interface.
func (dq *DescriptionQuery) addPredicate(pred func(s *sql.Selector)) {
	dq.predicates = append(dq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DescriptionQuery builder.
func (dq *DescriptionQuery) Filter() *DescriptionFilter {
	return &DescriptionFilter{dq}
}

// addPredicate implements the predicateAdder interface.
func (m *DescriptionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DescriptionMutation builder.
func (m *DescriptionMutation) Filter() *DescriptionFilter {
	return &DescriptionFilter{m}
}

// DescriptionFilter provides a generic filtering capability at runtime for DescriptionQuery.
type DescriptionFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *DescriptionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *DescriptionFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(description.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *DescriptionFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(description.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *DescriptionFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(description.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *DescriptionFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(description.FieldDeletedAt))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *DescriptionFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(description.FieldCoinTypeID))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *DescriptionFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(description.FieldTitle))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *DescriptionFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(description.FieldMessage))
}

// WhereUsedFor applies the entql string predicate on the used_for field.
func (f *DescriptionFilter) WhereUsedFor(p entql.StringP) {
	f.Where(p.Field(description.FieldUsedFor))
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/sphinx-coininfo/pkg/db/ent/description"
	"github.com/NpoolPlatform/sphinx-coininfo/pkg/types"
	"github.com/google/uuid"
)

// DescriptionCreate is the builder for creating a Description entity.
type DescriptionCreate struct {
	config
	mutation *DescriptionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCoinID sets the "coin_id" field.
func (dc *DescriptionCreate) SetCoinID(u uuid.UUID) *DescriptionCreate {
	dc.mutation.SetCoinID(u)
	return dc
}

// SetHumanReadableName sets the "human_readable_name" field.
func (dc *DescriptionCreate) SetHumanReadableName(s string) *DescriptionCreate {
	dc.mutation.SetHumanReadableName(s)
	return dc
}

// SetDescriptions sets the "descriptions" field.
func (dc *DescriptionCreate) SetDescriptions(td []types.CoinDescription) *DescriptionCreate {
	dc.mutation.SetDescriptions(td)
	return dc
}

// SetSpecTitle sets the "spec_title" field.
func (dc *DescriptionCreate) SetSpecTitle(s string) *DescriptionCreate {
	dc.mutation.SetSpecTitle(s)
	return dc
}

// SetSpecs sets the "specs" field.
func (dc *DescriptionCreate) SetSpecs(ts []types.CoinSpec) *DescriptionCreate {
	dc.mutation.SetSpecs(ts)
	return dc
}

// SetCreatedAt sets the "created_at" field.
func (dc *DescriptionCreate) SetCreatedAt(u uint32) *DescriptionCreate {
	dc.mutation.SetCreatedAt(u)
	return dc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dc *DescriptionCreate) SetNillableCreatedAt(u *uint32) *DescriptionCreate {
	if u != nil {
		dc.SetCreatedAt(*u)
	}
	return dc
}

// SetUpdatedAt sets the "updated_at" field.
func (dc *DescriptionCreate) SetUpdatedAt(u uint32) *DescriptionCreate {
	dc.mutation.SetUpdatedAt(u)
	return dc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dc *DescriptionCreate) SetNillableUpdatedAt(u *uint32) *DescriptionCreate {
	if u != nil {
		dc.SetUpdatedAt(*u)
	}
	return dc
}

// SetDeletedAt sets the "deleted_at" field.
func (dc *DescriptionCreate) SetDeletedAt(u uint32) *DescriptionCreate {
	dc.mutation.SetDeletedAt(u)
	return dc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dc *DescriptionCreate) SetNillableDeletedAt(u *uint32) *DescriptionCreate {
	if u != nil {
		dc.SetDeletedAt(*u)
	}
	return dc
}

// SetID sets the "id" field.
func (dc *DescriptionCreate) SetID(u uuid.UUID) *DescriptionCreate {
	dc.mutation.SetID(u)
	return dc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dc *DescriptionCreate) SetNillableID(u *uuid.UUID) *DescriptionCreate {
	if u != nil {
		dc.SetID(*u)
	}
	return dc
}

// Mutation returns the DescriptionMutation object of the builder.
func (dc *DescriptionCreate) Mutation() *DescriptionMutation {
	return dc.mutation
}

// Save creates the Description in the database.
func (dc *DescriptionCreate) Save(ctx context.Context) (*Description, error) {
	var (
		err  error
		node *Description
	)
	dc.defaults()
	if len(dc.hooks) == 0 {
		if err = dc.check(); err != nil {
			return nil, err
		}
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DescriptionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dc.check(); err != nil {
				return nil, err
			}
			dc.mutation = mutation
			if node, err = dc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			if dc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DescriptionCreate) SaveX(ctx context.Context) *Description {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DescriptionCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DescriptionCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DescriptionCreate) defaults() {
	if _, ok := dc.mutation.CreatedAt(); !ok {
		v := description.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		v := description.DefaultUpdatedAt()
		dc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dc.mutation.DeletedAt(); !ok {
		v := description.DefaultDeletedAt()
		dc.mutation.SetDeletedAt(v)
	}
	if _, ok := dc.mutation.ID(); !ok {
		v := description.DefaultID()
		dc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DescriptionCreate) check() error {
	if _, ok := dc.mutation.CoinID(); !ok {
		return &ValidationError{Name: "coin_id", err: errors.New(`ent: missing required field "Description.coin_id"`)}
	}
	if _, ok := dc.mutation.HumanReadableName(); !ok {
		return &ValidationError{Name: "human_readable_name", err: errors.New(`ent: missing required field "Description.human_readable_name"`)}
	}
	if _, ok := dc.mutation.Descriptions(); !ok {
		return &ValidationError{Name: "descriptions", err: errors.New(`ent: missing required field "Description.descriptions"`)}
	}
	if _, ok := dc.mutation.SpecTitle(); !ok {
		return &ValidationError{Name: "spec_title", err: errors.New(`ent: missing required field "Description.spec_title"`)}
	}
	if _, ok := dc.mutation.Specs(); !ok {
		return &ValidationError{Name: "specs", err: errors.New(`ent: missing required field "Description.specs"`)}
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Description.created_at"`)}
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Description.updated_at"`)}
	}
	if _, ok := dc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Description.deleted_at"`)}
	}
	return nil
}

func (dc *DescriptionCreate) sqlSave(ctx context.Context) (*Description, error) {
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (dc *DescriptionCreate) createSpec() (*Description, *sqlgraph.CreateSpec) {
	var (
		_node = &Description{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: description.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: description.FieldID,
			},
		}
	)
	_spec.OnConflict = dc.conflict
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dc.mutation.CoinID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: description.FieldCoinID,
		})
		_node.CoinID = value
	}
	if value, ok := dc.mutation.HumanReadableName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: description.FieldHumanReadableName,
		})
		_node.HumanReadableName = value
	}
	if value, ok := dc.mutation.Descriptions(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: description.FieldDescriptions,
		})
		_node.Descriptions = value
	}
	if value, ok := dc.mutation.SpecTitle(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: description.FieldSpecTitle,
		})
		_node.SpecTitle = value
	}
	if value, ok := dc.mutation.Specs(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: description.FieldSpecs,
		})
		_node.Specs = value
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: description.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: description.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := dc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: description.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Description.Create().
//		SetCoinID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DescriptionUpsert) {
//			SetCoinID(v+v).
//		}).
//		Exec(ctx)
//
func (dc *DescriptionCreate) OnConflict(opts ...sql.ConflictOption) *DescriptionUpsertOne {
	dc.conflict = opts
	return &DescriptionUpsertOne{
		create: dc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Description.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (dc *DescriptionCreate) OnConflictColumns(columns ...string) *DescriptionUpsertOne {
	dc.conflict = append(dc.conflict, sql.ConflictColumns(columns...))
	return &DescriptionUpsertOne{
		create: dc,
	}
}

type (
	// DescriptionUpsertOne is the builder for "upsert"-ing
	//  one Description node.
	DescriptionUpsertOne struct {
		create *DescriptionCreate
	}

	// DescriptionUpsert is the "OnConflict" setter.
	DescriptionUpsert struct {
		*sql.UpdateSet
	}
)

// SetCoinID sets the "coin_id" field.
func (u *DescriptionUpsert) SetCoinID(v uuid.UUID) *DescriptionUpsert {
	u.Set(description.FieldCoinID, v)
	return u
}

// UpdateCoinID sets the "coin_id" field to the value that was provided on create.
func (u *DescriptionUpsert) UpdateCoinID() *DescriptionUpsert {
	u.SetExcluded(description.FieldCoinID)
	return u
}

// SetHumanReadableName sets the "human_readable_name" field.
func (u *DescriptionUpsert) SetHumanReadableName(v string) *DescriptionUpsert {
	u.Set(description.FieldHumanReadableName, v)
	return u
}

// UpdateHumanReadableName sets the "human_readable_name" field to the value that was provided on create.
func (u *DescriptionUpsert) UpdateHumanReadableName() *DescriptionUpsert {
	u.SetExcluded(description.FieldHumanReadableName)
	return u
}

// SetDescriptions sets the "descriptions" field.
func (u *DescriptionUpsert) SetDescriptions(v []types.CoinDescription) *DescriptionUpsert {
	u.Set(description.FieldDescriptions, v)
	return u
}

// UpdateDescriptions sets the "descriptions" field to the value that was provided on create.
func (u *DescriptionUpsert) UpdateDescriptions() *DescriptionUpsert {
	u.SetExcluded(description.FieldDescriptions)
	return u
}

// SetSpecTitle sets the "spec_title" field.
func (u *DescriptionUpsert) SetSpecTitle(v string) *DescriptionUpsert {
	u.Set(description.FieldSpecTitle, v)
	return u
}

// UpdateSpecTitle sets the "spec_title" field to the value that was provided on create.
func (u *DescriptionUpsert) UpdateSpecTitle() *DescriptionUpsert {
	u.SetExcluded(description.FieldSpecTitle)
	return u
}

// SetSpecs sets the "specs" field.
func (u *DescriptionUpsert) SetSpecs(v []types.CoinSpec) *DescriptionUpsert {
	u.Set(description.FieldSpecs, v)
	return u
}

// UpdateSpecs sets the "specs" field to the value that was provided on create.
func (u *DescriptionUpsert) UpdateSpecs() *DescriptionUpsert {
	u.SetExcluded(description.FieldSpecs)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *DescriptionUpsert) SetCreatedAt(v uint32) *DescriptionUpsert {
	u.Set(description.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DescriptionUpsert) UpdateCreatedAt() *DescriptionUpsert {
	u.SetExcluded(description.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *DescriptionUpsert) AddCreatedAt(v uint32) *DescriptionUpsert {
	u.Add(description.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DescriptionUpsert) SetUpdatedAt(v uint32) *DescriptionUpsert {
	u.Set(description.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DescriptionUpsert) UpdateUpdatedAt() *DescriptionUpsert {
	u.SetExcluded(description.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *DescriptionUpsert) AddUpdatedAt(v uint32) *DescriptionUpsert {
	u.Add(description.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DescriptionUpsert) SetDeletedAt(v uint32) *DescriptionUpsert {
	u.Set(description.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DescriptionUpsert) UpdateDeletedAt() *DescriptionUpsert {
	u.SetExcluded(description.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *DescriptionUpsert) AddDeletedAt(v uint32) *DescriptionUpsert {
	u.Add(description.FieldDeletedAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Description.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(description.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *DescriptionUpsertOne) UpdateNewValues() *DescriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(description.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Description.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *DescriptionUpsertOne) Ignore() *DescriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DescriptionUpsertOne) DoNothing() *DescriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DescriptionCreate.OnConflict
// documentation for more info.
func (u *DescriptionUpsertOne) Update(set func(*DescriptionUpsert)) *DescriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DescriptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCoinID sets the "coin_id" field.
func (u *DescriptionUpsertOne) SetCoinID(v uuid.UUID) *DescriptionUpsertOne {
	return u.Update(func(s *DescriptionUpsert) {
		s.SetCoinID(v)
	})
}

// UpdateCoinID sets the "coin_id" field to the value that was provided on create.
func (u *DescriptionUpsertOne) UpdateCoinID() *DescriptionUpsertOne {
	return u.Update(func(s *DescriptionUpsert) {
		s.UpdateCoinID()
	})
}

// SetHumanReadableName sets the "human_readable_name" field.
func (u *DescriptionUpsertOne) SetHumanReadableName(v string) *DescriptionUpsertOne {
	return u.Update(func(s *DescriptionUpsert) {
		s.SetHumanReadableName(v)
	})
}

// UpdateHumanReadableName sets the "human_readable_name" field to the value that was provided on create.
func (u *DescriptionUpsertOne) UpdateHumanReadableName() *DescriptionUpsertOne {
	return u.Update(func(s *DescriptionUpsert) {
		s.UpdateHumanReadableName()
	})
}

// SetDescriptions sets the "descriptions" field.
func (u *DescriptionUpsertOne) SetDescriptions(v []types.CoinDescription) *DescriptionUpsertOne {
	return u.Update(func(s *DescriptionUpsert) {
		s.SetDescriptions(v)
	})
}

// UpdateDescriptions sets the "descriptions" field to the value that was provided on create.
func (u *DescriptionUpsertOne) UpdateDescriptions() *DescriptionUpsertOne {
	return u.Update(func(s *DescriptionUpsert) {
		s.UpdateDescriptions()
	})
}

// SetSpecTitle sets the "spec_title" field.
func (u *DescriptionUpsertOne) SetSpecTitle(v string) *DescriptionUpsertOne {
	return u.Update(func(s *DescriptionUpsert) {
		s.SetSpecTitle(v)
	})
}

// UpdateSpecTitle sets the "spec_title" field to the value that was provided on create.
func (u *DescriptionUpsertOne) UpdateSpecTitle() *DescriptionUpsertOne {
	return u.Update(func(s *DescriptionUpsert) {
		s.UpdateSpecTitle()
	})
}

// SetSpecs sets the "specs" field.
func (u *DescriptionUpsertOne) SetSpecs(v []types.CoinSpec) *DescriptionUpsertOne {
	return u.Update(func(s *DescriptionUpsert) {
		s.SetSpecs(v)
	})
}

// UpdateSpecs sets the "specs" field to the value that was provided on create.
func (u *DescriptionUpsertOne) UpdateSpecs() *DescriptionUpsertOne {
	return u.Update(func(s *DescriptionUpsert) {
		s.UpdateSpecs()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *DescriptionUpsertOne) SetCreatedAt(v uint32) *DescriptionUpsertOne {
	return u.Update(func(s *DescriptionUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *DescriptionUpsertOne) AddCreatedAt(v uint32) *DescriptionUpsertOne {
	return u.Update(func(s *DescriptionUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DescriptionUpsertOne) UpdateCreatedAt() *DescriptionUpsertOne {
	return u.Update(func(s *DescriptionUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DescriptionUpsertOne) SetUpdatedAt(v uint32) *DescriptionUpsertOne {
	return u.Update(func(s *DescriptionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *DescriptionUpsertOne) AddUpdatedAt(v uint32) *DescriptionUpsertOne {
	return u.Update(func(s *DescriptionUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DescriptionUpsertOne) UpdateUpdatedAt() *DescriptionUpsertOne {
	return u.Update(func(s *DescriptionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DescriptionUpsertOne) SetDeletedAt(v uint32) *DescriptionUpsertOne {
	return u.Update(func(s *DescriptionUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *DescriptionUpsertOne) AddDeletedAt(v uint32) *DescriptionUpsertOne {
	return u.Update(func(s *DescriptionUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DescriptionUpsertOne) UpdateDeletedAt() *DescriptionUpsertOne {
	return u.Update(func(s *DescriptionUpsert) {
		s.UpdateDeletedAt()
	})
}

// Exec executes the query.
func (u *DescriptionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DescriptionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DescriptionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DescriptionUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: DescriptionUpsertOne.ID is not supported by MySQL driver. Use DescriptionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DescriptionUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DescriptionCreateBulk is the builder for creating many Description entities in bulk.
type DescriptionCreateBulk struct {
	config
	builders []*DescriptionCreate
	conflict []sql.ConflictOption
}

// Save creates the Description entities in the database.
func (dcb *DescriptionCreateBulk) Save(ctx context.Context) ([]*Description, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Description, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DescriptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DescriptionCreateBulk) SaveX(ctx context.Context) []*Description {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DescriptionCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DescriptionCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Description.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DescriptionUpsert) {
//			SetCoinID(v+v).
//		}).
//		Exec(ctx)
//
func (dcb *DescriptionCreateBulk) OnConflict(opts ...sql.ConflictOption) *DescriptionUpsertBulk {
	dcb.conflict = opts
	return &DescriptionUpsertBulk{
		create: dcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Description.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (dcb *DescriptionCreateBulk) OnConflictColumns(columns ...string) *DescriptionUpsertBulk {
	dcb.conflict = append(dcb.conflict, sql.ConflictColumns(columns...))
	return &DescriptionUpsertBulk{
		create: dcb,
	}
}

// DescriptionUpsertBulk is the builder for "upsert"-ing
// a bulk of Description nodes.
type DescriptionUpsertBulk struct {
	create *DescriptionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Description.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(description.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *DescriptionUpsertBulk) UpdateNewValues() *DescriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(description.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Description.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *DescriptionUpsertBulk) Ignore() *DescriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DescriptionUpsertBulk) DoNothing() *DescriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DescriptionCreateBulk.OnConflict
// documentation for more info.
func (u *DescriptionUpsertBulk) Update(set func(*DescriptionUpsert)) *DescriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DescriptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCoinID sets the "coin_id" field.
func (u *DescriptionUpsertBulk) SetCoinID(v uuid.UUID) *DescriptionUpsertBulk {
	return u.Update(func(s *DescriptionUpsert) {
		s.SetCoinID(v)
	})
}

// UpdateCoinID sets the "coin_id" field to the value that was provided on create.
func (u *DescriptionUpsertBulk) UpdateCoinID() *DescriptionUpsertBulk {
	return u.Update(func(s *DescriptionUpsert) {
		s.UpdateCoinID()
	})
}

// SetHumanReadableName sets the "human_readable_name" field.
func (u *DescriptionUpsertBulk) SetHumanReadableName(v string) *DescriptionUpsertBulk {
	return u.Update(func(s *DescriptionUpsert) {
		s.SetHumanReadableName(v)
	})
}

// UpdateHumanReadableName sets the "human_readable_name" field to the value that was provided on create.
func (u *DescriptionUpsertBulk) UpdateHumanReadableName() *DescriptionUpsertBulk {
	return u.Update(func(s *DescriptionUpsert) {
		s.UpdateHumanReadableName()
	})
}

// SetDescriptions sets the "descriptions" field.
func (u *DescriptionUpsertBulk) SetDescriptions(v []types.CoinDescription) *DescriptionUpsertBulk {
	return u.Update(func(s *DescriptionUpsert) {
		s.SetDescriptions(v)
	})
}

// UpdateDescriptions sets the "descriptions" field to the value that was provided on create.
func (u *DescriptionUpsertBulk) UpdateDescriptions() *DescriptionUpsertBulk {
	return u.Update(func(s *DescriptionUpsert) {
		s.UpdateDescriptions()
	})
}

// SetSpecTitle sets the "spec_title" field.
func (u *DescriptionUpsertBulk) SetSpecTitle(v string) *DescriptionUpsertBulk {
	return u.Update(func(s *DescriptionUpsert) {
		s.SetSpecTitle(v)
	})
}

// UpdateSpecTitle sets the "spec_title" field to the value that was provided on create.
func (u *DescriptionUpsertBulk) UpdateSpecTitle() *DescriptionUpsertBulk {
	return u.Update(func(s *DescriptionUpsert) {
		s.UpdateSpecTitle()
	})
}

// SetSpecs sets the "specs" field.
func (u *DescriptionUpsertBulk) SetSpecs(v []types.CoinSpec) *DescriptionUpsertBulk {
	return u.Update(func(s *DescriptionUpsert) {
		s.SetSpecs(v)
	})
}

// UpdateSpecs sets the "specs" field to the value that was provided on create.
func (u *DescriptionUpsertBulk) UpdateSpecs() *DescriptionUpsertBulk {
	return u.Update(func(s *DescriptionUpsert) {
		s.UpdateSpecs()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *DescriptionUpsertBulk) SetCreatedAt(v uint32) *DescriptionUpsertBulk {
	return u.Update(func(s *DescriptionUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *DescriptionUpsertBulk) AddCreatedAt(v uint32) *DescriptionUpsertBulk {
	return u.Update(func(s *DescriptionUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DescriptionUpsertBulk) UpdateCreatedAt() *DescriptionUpsertBulk {
	return u.Update(func(s *DescriptionUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DescriptionUpsertBulk) SetUpdatedAt(v uint32) *DescriptionUpsertBulk {
	return u.Update(func(s *DescriptionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *DescriptionUpsertBulk) AddUpdatedAt(v uint32) *DescriptionUpsertBulk {
	return u.Update(func(s *DescriptionUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DescriptionUpsertBulk) UpdateUpdatedAt() *DescriptionUpsertBulk {
	return u.Update(func(s *DescriptionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DescriptionUpsertBulk) SetDeletedAt(v uint32) *DescriptionUpsertBulk {
	return u.Update(func(s *DescriptionUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *DescriptionUpsertBulk) AddDeletedAt(v uint32) *DescriptionUpsertBulk {
	return u.Update(func(s *DescriptionUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DescriptionUpsertBulk) UpdateDeletedAt() *DescriptionUpsertBulk {
	return u.Update(func(s *DescriptionUpsert) {
		s.UpdateDeletedAt()
	})
}

// Exec executes the query.
func (u *DescriptionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DescriptionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DescriptionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DescriptionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

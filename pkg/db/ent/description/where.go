// Code generated by entc, DO NOT EDIT.

package description

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/sphinx-coininfo/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CoinID applies equality check predicate on the "coin_id" field. It's identical to CoinIDEQ.
func CoinID(v uuid.UUID) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinID), v))
	})
}

// HumanReadableName applies equality check predicate on the "human_readable_name" field. It's identical to HumanReadableNameEQ.
func HumanReadableName(v string) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHumanReadableName), v))
	})
}

// SpecTitle applies equality check predicate on the "spec_title" field. It's identical to SpecTitleEQ.
func SpecTitle(v string) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpecTitle), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// CoinIDEQ applies the EQ predicate on the "coin_id" field.
func CoinIDEQ(v uuid.UUID) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinID), v))
	})
}

// CoinIDNEQ applies the NEQ predicate on the "coin_id" field.
func CoinIDNEQ(v uuid.UUID) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoinID), v))
	})
}

// CoinIDIn applies the In predicate on the "coin_id" field.
func CoinIDIn(vs ...uuid.UUID) predicate.Description {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Description(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCoinID), v...))
	})
}

// CoinIDNotIn applies the NotIn predicate on the "coin_id" field.
func CoinIDNotIn(vs ...uuid.UUID) predicate.Description {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Description(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCoinID), v...))
	})
}

// CoinIDGT applies the GT predicate on the "coin_id" field.
func CoinIDGT(v uuid.UUID) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCoinID), v))
	})
}

// CoinIDGTE applies the GTE predicate on the "coin_id" field.
func CoinIDGTE(v uuid.UUID) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCoinID), v))
	})
}

// CoinIDLT applies the LT predicate on the "coin_id" field.
func CoinIDLT(v uuid.UUID) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCoinID), v))
	})
}

// CoinIDLTE applies the LTE predicate on the "coin_id" field.
func CoinIDLTE(v uuid.UUID) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCoinID), v))
	})
}

// HumanReadableNameEQ applies the EQ predicate on the "human_readable_name" field.
func HumanReadableNameEQ(v string) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHumanReadableName), v))
	})
}

// HumanReadableNameNEQ applies the NEQ predicate on the "human_readable_name" field.
func HumanReadableNameNEQ(v string) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHumanReadableName), v))
	})
}

// HumanReadableNameIn applies the In predicate on the "human_readable_name" field.
func HumanReadableNameIn(vs ...string) predicate.Description {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Description(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHumanReadableName), v...))
	})
}

// HumanReadableNameNotIn applies the NotIn predicate on the "human_readable_name" field.
func HumanReadableNameNotIn(vs ...string) predicate.Description {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Description(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHumanReadableName), v...))
	})
}

// HumanReadableNameGT applies the GT predicate on the "human_readable_name" field.
func HumanReadableNameGT(v string) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHumanReadableName), v))
	})
}

// HumanReadableNameGTE applies the GTE predicate on the "human_readable_name" field.
func HumanReadableNameGTE(v string) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHumanReadableName), v))
	})
}

// HumanReadableNameLT applies the LT predicate on the "human_readable_name" field.
func HumanReadableNameLT(v string) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHumanReadableName), v))
	})
}

// HumanReadableNameLTE applies the LTE predicate on the "human_readable_name" field.
func HumanReadableNameLTE(v string) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHumanReadableName), v))
	})
}

// HumanReadableNameContains applies the Contains predicate on the "human_readable_name" field.
func HumanReadableNameContains(v string) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHumanReadableName), v))
	})
}

// HumanReadableNameHasPrefix applies the HasPrefix predicate on the "human_readable_name" field.
func HumanReadableNameHasPrefix(v string) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHumanReadableName), v))
	})
}

// HumanReadableNameHasSuffix applies the HasSuffix predicate on the "human_readable_name" field.
func HumanReadableNameHasSuffix(v string) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHumanReadableName), v))
	})
}

// HumanReadableNameEqualFold applies the EqualFold predicate on the "human_readable_name" field.
func HumanReadableNameEqualFold(v string) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHumanReadableName), v))
	})
}

// HumanReadableNameContainsFold applies the ContainsFold predicate on the "human_readable_name" field.
func HumanReadableNameContainsFold(v string) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHumanReadableName), v))
	})
}

// SpecTitleEQ applies the EQ predicate on the "spec_title" field.
func SpecTitleEQ(v string) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpecTitle), v))
	})
}

// SpecTitleNEQ applies the NEQ predicate on the "spec_title" field.
func SpecTitleNEQ(v string) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSpecTitle), v))
	})
}

// SpecTitleIn applies the In predicate on the "spec_title" field.
func SpecTitleIn(vs ...string) predicate.Description {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Description(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSpecTitle), v...))
	})
}

// SpecTitleNotIn applies the NotIn predicate on the "spec_title" field.
func SpecTitleNotIn(vs ...string) predicate.Description {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Description(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSpecTitle), v...))
	})
}

// SpecTitleGT applies the GT predicate on the "spec_title" field.
func SpecTitleGT(v string) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSpecTitle), v))
	})
}

// SpecTitleGTE applies the GTE predicate on the "spec_title" field.
func SpecTitleGTE(v string) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSpecTitle), v))
	})
}

// SpecTitleLT applies the LT predicate on the "spec_title" field.
func SpecTitleLT(v string) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSpecTitle), v))
	})
}

// SpecTitleLTE applies the LTE predicate on the "spec_title" field.
func SpecTitleLTE(v string) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSpecTitle), v))
	})
}

// SpecTitleContains applies the Contains predicate on the "spec_title" field.
func SpecTitleContains(v string) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSpecTitle), v))
	})
}

// SpecTitleHasPrefix applies the HasPrefix predicate on the "spec_title" field.
func SpecTitleHasPrefix(v string) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSpecTitle), v))
	})
}

// SpecTitleHasSuffix applies the HasSuffix predicate on the "spec_title" field.
func SpecTitleHasSuffix(v string) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSpecTitle), v))
	})
}

// SpecTitleEqualFold applies the EqualFold predicate on the "spec_title" field.
func SpecTitleEqualFold(v string) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSpecTitle), v))
	})
}

// SpecTitleContainsFold applies the ContainsFold predicate on the "spec_title" field.
func SpecTitleContainsFold(v string) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSpecTitle), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.Description {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Description(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.Description {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Description(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.Description {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Description(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.Description {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Description(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.Description {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Description(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.Description {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Description(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Description) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Description) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Description) predicate.Description {
	return predicate.Description(func(s *sql.Selector) {
		p(s.Not())
	})
}
